import logging
from telegram import Update
from telegram.ext import ApplicationBuilder, CommandHandler, ContextTypes, MessageHandler, filters
import json
import os

TOKEN ="7969320755:AAG-5jV8i1FRCNyPQm8-wTF8WLSLh2uFCmc"
DATA_FILE = "points.json"

# إعداد اللوگ
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# تحميل النقاط من ملف
def load_points():
    if os.path.exists(DATA_FILE):
        with open(DATA_FILE, "r") as f:
            return json.load(f)
    return {}

# حفظ النقاط إلى ملف
def save_points(data):
    with open(DATA_FILE, "w") as f:
        json.dump(data, f)

# التحقق إذا المستخدم مشرف
async def is_admin(update: Update, context: ContextTypes.DEFAULT_TYPE):
    member = await update.effective_chat.get_member(update.effective_user.id)
    return member.status in ["administrator", "creator"]

# إضافة نقاط
async def add_points(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not await is_admin(update, context):
        return await update.message.reply_text("بس المشرفين يكدرون يضيفون نقاط.")
    try:
        number = int(context.args[0])
        user = update.message.reply_to_message.from_user
        data = load_points()
        uid = str(user.id)
        data[uid] = data.get(uid, 0) + number
        save_points(data)
        await update.message.reply_text(f"تمت إضافة {number} نقطة إلى {user.first_name}، المجموع: {data[uid]}")
        if data[uid] >= 20:
            admins = await context.bot.get_chat_administrators(update.effective_chat.id)
            for admin in admins:
                if admin.user.id != user.id:
                    await context.bot.send_message(chat_id=admin.user.id, text=f"{user.first_name} وصل إلى {data[uid]} نقطة!")
    except:
        await update.message.reply_text("الرجاء الرد على رسالة العضو وكتابة عدد النقاط، مثال:\n/اضف 5")

# حذف نقاط
async def remove_points(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not await is_admin(update, context):
        return await update.message.reply_text("بس المشرفين يكدرون يحذفون نقاط.")
    try:
        number = int(context.args[0])
        user = update.message.reply_to_message.from_user
        data = load_points()
        uid = str(user.id)
        data[uid] = max(data.get(uid, 0) - number, 0)
        save_points(data)
        await update.message.reply_text(f"تم خصم {number} نقطة من {user.first_name}، المجموع: {data[uid]}")
    except:
        await update.message.reply_text("الرجاء الرد على رسالة العضو وكتابة عدد النقاط، مثال:\n/امسح 3")

# عرض نقاط العضو
async def my_points(update: Update, context: ContextTypes.DEFAULT_TYPE):
    data = load_points()
    uid = str(update.message.from_user.id)
    points = data.get(uid, 0)
    await update.message.reply_text(f"نقاطك: {points}")

# إعادة تعيين جميع النقاط
async def reset_all(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not await is_admin(update, context):
        return await update.message.reply_text("بس المشرفين يكدرون يمسحون النقاط.")
    save_points({})
    await update.message.reply_text("تم مسح جميع النقاط!")

# تشغيل البوت
async def main():
    app = ApplicationBuilder().token(TOKEN).build()

    app.add_handler(CommandHandler("اضف", add_points))
    app.add_handler(CommandHandler("امسح", remove_points))
    app.add_handler(CommandHandler("نقاطي", my_points))
    app.add_handler(CommandHandler("مسح", reset_all))

    logger.info("البوت اشتغل...")
    await app.run_polling()

if __name__ == "__main__":
    import asyncio
    asyncio.run(main())